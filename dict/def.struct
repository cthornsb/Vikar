# definitions.struct
#
# This file is used for declaring various data types for
#  .root file output from RootPixieScan. This file is intended
#  to be read by the executable StructFileGenerator. That program
#  will automatically generate the following structure files...
#
#   Structures.cpp
#   Structures.h
#   LinkDef.h
#
# These files will be used in the generation of a root dictionary.
#
# Valid types:
#  char, short, int, float, double, and any other standard c++ type
#  Types beginning with 'u_' will be unsigned (e.g. u_int	= unsigned int)
#  Types beginning with 'vector:' will be a vector of that type (e.g. vector:int = std::vector<int>)
#
# Special flags:
#  Variable names ending with '_mult' are considered as a multiplicity variable 
#   and are incremented each time the ::Append method is called. These variables
#   are also not included to the call to ::Append.
#  Variable names ending with '_wave' are considered as trace variables. This
#   means that they will be included in the Waveform class instead of Structure.
#
# Cory R. Thornsberry
# Last updated: Aug. 21st, 2015

#####################################################################
# ReactionProduct
#####################################################################
# Class name
BEGIN_CLASS	ReactionProduct

# Short class description
SHORT	Ejectile & recoil particle information

# Longer class description
LONG	Structure for storing information about the ejectile & recoil particles

# Data types and names
# type	name	description
BEGIN_TYPES
vector:double	hitX	The x-component of position of the detector hit in 3d space (m).
vector:double	hitY	The y-component of position of the detector hit in 3d space (m).
vector:double	hitZ	The z-component of position of the detector hit in 3d space (m).
vector:double	hitR	The distance from the origin to the detector hit in 3d space (m).
vector:double	hitTheta	The angle of the recoil particle about the vertical-axis (deg).
vector:double	hitPhi	The angle of the recoil particle about the beam-axis (deg).
vector:double	qdc	The energy of the particle calculated from the time-of-flight (MeV).
vector:double	tof	The time-of-flight of the particle from the reaction point to the detector (ns).
vector:double	energy	The energy of the particle after the reacting (MeV).
vector:double	faceX	The x-component of the position of the detector hit on the face of the detector (m).
vector:double	faceY	The y-component of the position of the detector hit on the face of the detector (m).
vector:double	faceZ	The z-component of the position of the detector hit on the face of the detector (m).
vector:int	loc	The location of the detector in the detector setup file.
vector:bool	bg	Set to true if this is a background event.
u_int	mult	Multiplicity of recoil detector hits	

# Trace output data types and names (must end with _wave)
# type	name	description
END_TYPES

# End this class
END_CLASS

#####################################################################
# ReactionObject
#####################################################################
# Class name
BEGIN_CLASS	ReactionObject

# Short class description
SHORT	Reaction information

# Longer class description
LONG	Structure for storing information about the reaction

# Data types and names
# type	name	description
BEGIN_TYPES
double	energy	The input kinetic energy of the reaction (MeV).
double	Eeject	The outgoing ejectile particle kinetic energy (MeV).
double	Erecoil	The outgoing recoil particle kinetic energy (MeV).
double	comAngle	The center-of-mass angle of the reaction (deg).
u_int	state	The ID of the recoil excited state used for the reaction (0 is the g.s.).
double	reactX	The x-coordinate of the reaction point inside the target (m).
double	reactY	The y-coordinate of the reaction point inside the target (m).
double	reactZ	The z-coordinate of the reaction point inside the target (m).
double	trajectoryX	The x-coordinate of the trajectory of the beam particle just before the reaction.
double	trajectoryY	The y-coordinate of the trajectory of the beam particle just before the reaction.
double	trajectoryZ	The z-coordinate of the trajectory of the beam particle just before the reaction.

# Trace output data types and names (must end with _wave)
# type	name	description
END_TYPES

# End this class
END_CLASS

#####################################################################
# MonteCarlo
#####################################################################
# Class name
BEGIN_CLASS	MonteCarlo

# Short class description
SHORT	Monte Carlo detector test information

# Longer class description
LONG	Structure for storing information about Monte Carlo hits on the detector setup

# Data types and names
# type	name	description
BEGIN_TYPES
vector:double	face1_hitX	X component of the entrance face intersect
vector:double	face1_hitY	Y component of the entrance face intersect
vector:double	face1_hitZ	Z component of the entrance face intersect
vector:double	face2_hitX	X component of the exit face intersect
vector:double	face2_hitY	Y component of the exit face intersect
vector:double	face2_hitZ	Z component of the exit face intersect
vector:double	hitTheta	Theta lab angle of the detector intersection
vector:double	hitPhi	Phi lab angle of the detector intersection
vector:int	face1_ID	ID of the face where the ray enters the detector
vector:int	face2_ID	ID of the face where the ray exits the detector
vector:int	location	The detector location in the detector setup file
vector:int	type	Type of detector (0 == ejectile, 1 == recoil, 2 == both)

# Trace output data types and names (must end with _wave)
# type	name	description
END_TYPES

# End this class
END_CLASS
